package cn.econets.blossom.framework.errorcode.core.generator;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.exceptions.ExceptionUtil;
import cn.hutool.core.util.ClassUtil;
import cn.hutool.core.util.ReflectUtil;
import cn.econets.blossom.framework.common.exception.ErrorCode;
import cn.econets.blossom.module.system.api.errorcode.ErrorCodeApi;
import cn.econets.blossom.module.system.api.errorcode.dto.ErrorCodeAutoGenerateReqDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * ErrorCodeAutoGenerator Implementation class of
 * The purpose is，Scan the specified {@link #constantsClassList} Class，Write to system In service
 *
 */
@RequiredArgsConstructor
@Slf4j
public class ErrorCodeAutoGeneratorImpl implements ErrorCodeAutoGenerator {

    /**
     * Application Grouping
     */
    private final String applicationName;
    /**
     * Error code enumeration class
     */
    private final List<String> constantsClassList;
    /**
     * Error code Api
     */
    private final ErrorCodeApi errorCodeApi;

    @Override
    @EventListener(ApplicationReadyEvent.class)
    @Async // Asynchronous，Ensure the project startup process，It is not a critical process after all
    public void execute() {
        // First step，Parsing error code
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = parseErrorCode();
        log.info("[execute][The number of error codes parsed is ({}) pcs]", autoGenerateDTOs.size());

        // Step 2，Write to system Service
        try {
            errorCodeApi.autoGenerateErrorCodeList(autoGenerateDTOs);
            log.info("[execute][Write to system Component completed]");
        } catch (Exception ex) {
            log.error("[execute][Write to system Component failed({})]", ExceptionUtil.getRootCauseMessage(ex));
        }
    }

    /**
     * Analysis constantsClassList Variable，Convert to error code array
     *
     * @return Error code array
     */
    private List<ErrorCodeAutoGenerateReqDTO> parseErrorCode() {
        // Verification errorCodeConstantsClass Parameters
        if (CollUtil.isEmpty(constantsClassList)) {
            log.info("[execute][Not configured application.error-code.constants-class-list Configuration item，Do not automatically write to system In service]");
            return new ArrayList<>();
        }

        // Parsing error code
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = new ArrayList<>();
        constantsClassList.forEach(constantsClass -> {
            try {
                // Parsing error code enumeration class
                Class<?> errorCodeConstantsClazz = ClassUtil.loadClass(constantsClass);
                // Parsing error code
                autoGenerateDTOs.addAll(parseErrorCode(errorCodeConstantsClazz));
            } catch (Exception ex) {
                log.warn("[parseErrorCode][constantsClass({}) Load failed({})]", constantsClass,
                        ExceptionUtil.getRootCauseMessage(ex));
            }
        });
        return autoGenerateDTOs;
    }

    /**
     * Parsing error code class，Get error code array
     *
     * @return Error code array
     */
    private List<ErrorCodeAutoGenerateReqDTO> parseErrorCode(Class<?> constantsClass) {
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = new ArrayList<>();
        Arrays.stream(constantsClass.getFields()).forEach(field -> {
            if (field.getType() != ErrorCode.class) {
                return;
            }
            // Convert to ErrorCodeAutoGenerateReqDTO Object
            ErrorCode errorCode = (ErrorCode) ReflectUtil.getFieldValue(constantsClass, field);
            autoGenerateDTOs.add(new ErrorCodeAutoGenerateReqDTO().setApplicationName(applicationName)
                    .setCode(errorCode.getCode()).setMessage(errorCode.getMsg()));
        });
        return autoGenerateDTOs;
    }

}

