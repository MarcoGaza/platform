#set ($subTable = $subTables.get($subIndex))##Current table
#set ($subColumns = $subColumnsList.get($subIndex))##Current field array
#set ($subJoinColumn = $subJoinColumns.get($subIndex))##Current join Field
#set ($subSimpleClassName = $subSimpleClassNames.get($subIndex))
#set ($subJoinColumn = $subJoinColumns.get($subIndex))##Current join Field
#set ($SubJoinColumnName = $subJoinColumn.javaField.substring(0,1).toUpperCase() + ${subJoinColumn.javaField.substring(1)})##Capitalize the first letter
<template>
#if ( $subTable.subJoinMany )## Situation 1：One to many，table + form
  <el-form
    ref="formRef"
    :model="formData"
    :rules="formRules"
    v-loading="formLoading"
    label-width="0px"
    :inline-message="true"
  >
    <el-table :data="formData" class="-mt-10px">
      <el-table-column label="Serial number" type="index" width="100" />
#foreach($column in $subColumns)
    #if ($column.createOperation || $column.updateOperation)
        #set ($dictType = $column.dictType)
        #set ($javaField = $column.javaField)
        #set ($javaType = $column.javaType)
        #set ($AttrName = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #set ($comment = $column.columnComment)
        #set ($dictMethod = "getDictOptions")## Which one to use for calculation dict Dictionary method
        #if ($javaType == "Integer" || $javaType == "Long" || $javaType == "Byte" || $javaType == "Short")
            #set ($dictMethod = "getIntDictOptions")
        #elseif ($javaType == "String")
            #set ($dictMethod = "getStrDictOptions")
        #elseif ($javaType == "Boolean")
            #set ($dictMethod = "getBoolDictOptions")
        #end
        #if ( $column.id == $subJoinColumn.id) ## Special：Ignore the master and child tables join Field，No need to fill in
        #elseif ($column.htmlType == "input" && !$column.primaryKey)## Ignore primary key，Not in the form
      <el-table-column label="${comment}" min-width="150">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <el-input v-model="row.${javaField}" placeholder="Please enter${comment}" />
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "imageUpload")## Upload pictures
      <el-table-column label="${comment}" min-width="200">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <UploadImg v-model="row.${javaField}" />
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "fileUpload")## File upload
      <el-table-column label="${comment}" min-width="200">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <UploadFile v-model="row.${javaField}" />
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "editor")## Text Editor
      <el-table-column label="${comment}" min-width="400">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <Editor v-model="row.${javaField}" height="150px" />
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "select")## Drop-down box
      <el-table-column label="${comment}" min-width="150">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <el-select v-model="row.${javaField}" placeholder="Please select${comment}">
              #if ("" != $dictType)## With data dictionary
                <el-option
                  v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
                  :key="dict.value"
                  :label="dict.label"
                  :value="dict.value"
                />
              #else##No data dictionary
                <el-option label="Please select dictionary to generate" value="" />
              #end
            </el-select>
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "checkbox")## Multiple selection boxes
      <el-table-column label="${comment}" min-width="150">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <el-checkbox-group v-model="row.${javaField}">
              #if ("" != $dictType)## With data dictionary
                <el-checkbox
                  v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
                  :key="dict.value"
                  :label="dict.value"
                >
                  {{ dict.label }}
                </el-checkbox>
              #else##No data dictionary
                <el-checkbox>Please select dictionary to generate</el-checkbox>
              #end
            </el-checkbox-group>
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "radio")## Radio Box
      <el-table-column label="${comment}" min-width="150">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <el-radio-group v-model="row.${javaField}">
              #if ("" != $dictType)## With data dictionary
                <el-radio
                  v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
                  :key="dict.value"
                  :label="dict.value"
                >
                  {{ dict.label }}
                </el-radio>
              #else##No data dictionary
                <el-radio label="1">Please select dictionary to generate</el-radio>
              #end
            </el-radio-group>
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "datetime")## Time frame
      <el-table-column label="${comment}" min-width="150">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <el-date-picker
              v-model="row.${javaField}"
              type="date"
              value-format="x"
              placeholder="Select${comment}"
            />
          </el-form-item>
        </template>
      </el-table-column>
        #elseif($column.htmlType == "textarea")## Text box
      <el-table-column label="${comment}" min-width="200">
        <template #default="{ row, $index }">
          <el-form-item :prop="`${$index}.${javaField}`" :rules="formRules.${javaField}" class="mb-0px!">
            <el-input v-model="row.${javaField}" type="textarea" placeholder="Please enter${comment}" />
          </el-form-item>
        </template>
      </el-table-column>
        #end
    #end
#end
      <el-table-column align="center" fixed="right" label="Operation" width="60">
        <template #default="{ $index }">
          <el-button @click="handleDelete($index)" link>—</el-button>
        </template>
      </el-table-column>
    </el-table>
  </el-form>
  <el-row justify="center" class="mt-3">
    <el-button @click="handleAdd" round>+ Add${subTable.classComment}</el-button>
  </el-row>
#else## Situation 2：One-to-one，form
  <el-form
    ref="formRef"
    :model="formData"
    :rules="formRules"
    label-width="100px"
    v-loading="formLoading"
  >
#foreach($column in $subColumns)
  #if ($column.createOperation || $column.updateOperation)
  #set ($dictType = $column.dictType)
      #set ($javaField = $column.javaField)
      #set ($javaType = $column.javaType)
      #set ($AttrName = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
      #set ($comment = $column.columnComment)
      #set ($dictMethod = "getDictOptions")## Which one to use for calculation dict Dictionary method
      #if ($javaType == "Integer" || $javaType == "Long" || $javaType == "Byte" || $javaType == "Short")
        #set ($dictMethod = "getIntDictOptions")
      #elseif ($javaType == "String")
          #set ($dictMethod = "getStrDictOptions")
      #elseif ($javaType == "Boolean")
          #set ($dictMethod = "getBoolDictOptions")
      #end
      #if ( $column.id == $subJoinColumn.id) ## Special：Ignore the master and sub-tables join Field，No need to fill in
      #elseif ($column.htmlType == "input" && !$column.primaryKey)## Ignore primary key，Not in the form
    <el-form-item label="${comment}" prop="${javaField}">
      <el-input v-model="formData.${javaField}" placeholder="Please enter${comment}" />
    </el-form-item>
      #elseif($column.htmlType == "imageUpload")## Upload pictures
    <el-form-item label="${comment}" prop="${javaField}">
      <UploadImg v-model="formData.${javaField}" />
    </el-form-item>
      #elseif($column.htmlType == "fileUpload")## File upload
    <el-form-item label="${comment}" prop="${javaField}">
      <UploadFile v-model="formData.${javaField}" />
    </el-form-item>
      #elseif($column.htmlType == "editor")## Text Editor
    <el-form-item label="${comment}" prop="${javaField}">
      <Editor v-model="formData.${javaField}" height="150px" />
    </el-form-item>
      #elseif($column.htmlType == "select")## Drop-down box
    <el-form-item label="${comment}" prop="${javaField}">
      <el-select v-model="formData.${javaField}" placeholder="Please select${comment}">
              #if ("" != $dictType)## With data dictionary
        <el-option
          v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
          :key="dict.value"
          :label="dict.label"
          :value="dict.value"
        />
              #else##No data dictionary
        <el-option label="Please select dictionary to generate" value="" />
              #end
      </el-select>
    </el-form-item>
      #elseif($column.htmlType == "checkbox")## Multiple selection boxes
    <el-form-item label="${comment}" prop="${javaField}">
      <el-checkbox-group v-model="formData.${javaField}">
              #if ("" != $dictType)## With data dictionary
        <el-checkbox
          v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
          :key="dict.value"
          :label="dict.value"
        >
          {{ dict.label }}
        </el-checkbox>
              #else##No data dictionary
        <el-checkbox>Please select dictionary to generate</el-checkbox>
              #end
      </el-checkbox-group>
    </el-form-item>
      #elseif($column.htmlType == "radio")## Radio box
    <el-form-item label="${comment}" prop="${javaField}">
      <el-radio-group v-model="formData.${javaField}">
              #if ("" != $dictType)## With data dictionary
        <el-radio
          v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
          :key="dict.value"
          :label="dict.value"
          >
          {{ dict.label }}
        </el-radio>
              #else##No data dictionary
        <el-radio label="1">Please select dictionary to generate</el-radio>
              #end
      </el-radio-group>
    </el-form-item>
      #elseif($column.htmlType == "datetime")## Time frame
    <el-form-item label="${comment}" prop="${javaField}">
      <el-date-picker
        v-model="formData.${javaField}"
        type="date"
        value-format="x"
        placeholder="Select${comment}"
      />
    </el-form-item>
      #elseif($column.htmlType == "textarea")## Text box
    <el-form-item label="${comment}" prop="${javaField}">
      <el-input v-model="formData.${javaField}" type="textarea" placeholder="Please enter${comment}" />
    </el-form-item>
      #end
  #end
#end
  </el-form>
#end
</template>
<script setup lang="ts">
import { getIntDictOptions, getStrDictOptions, getBoolDictOptions, DICT_TYPE } from '@/utils/dict'
import * as ${simpleClassName}Api from '@/api/${table.moduleName}/${table.businessName}'

const props = defineProps<{
  ${subJoinColumn.javaField}: undefined // ${subJoinColumn.columnComment}（Related fields of the main table）
}>()
const formLoading = ref(false) // The form is loading
const formData = ref([])
const formRules = reactive({
#foreach ($column in $subColumns)
    #if (($column.createOperation || $column.updateOperation) && !$column.nullable && !${column.primaryKey})## Create or update operation && Requires non-empty && Non-primary key
        #set($comment=$column.columnComment)
  $column.javaField: [{ required: true, message: '${comment}Cannot be empty', trigger: #if($column.htmlType == 'select')'change'#else'blur'#end }],
    #end
#end
})
const formRef = ref() // Form Ref

/** Monitor changes in the associated fields of the main table，Load the corresponding sub-table data */
watch(
  () => props.${subJoinColumn.javaField},
  async (val) => {
    // 1. Reset form
#if ( $subTable.subJoinMany )
    formData.value = []
#else
    formData.value = {
    #foreach ($column in $subColumns)
      #if ($column.createOperation || $column.updateOperation)
        #if ($column.htmlType == "checkbox")
      $column.javaField: [],
        #else
      $column.javaField: undefined,
        #end
      #end
    #end
    }
#end
    // 2. val Not empty，Load data
    if (!val) {
      return;
    }
    try {
      formLoading.value = true
#if ( $subTable.subJoinMany )
      formData.value = await ${simpleClassName}Api.get${subSimpleClassName}ListBy${SubJoinColumnName}(val)
#else
      const data = await ${simpleClassName}Api.get${subSimpleClassName}By${SubJoinColumnName}(val)
      if (!data) {
        return
      }
      formData.value = data
#end
    } finally {
      formLoading.value = false
    }
  },
  { immediate: true }
)
#if ( $subTable.subJoinMany )

/** Add button operation */
const handleAdd = () => {
  const row = {
#foreach ($column in $subColumns)
    #if ($column.createOperation || $column.updateOperation)
      #if ($column.htmlType == "checkbox")
    $column.javaField: [],
      #else
    $column.javaField: undefined,
      #end
  #end
#end
  }
  row.${subJoinColumn.javaField} = props.${subJoinColumn.javaField}
  formData.value.push(row)
}

/** Delete button operation */
const handleDelete = (index) => {
  formData.value.splice(index, 1)
}
#end

/** Form validation */
const validate = () => {
  return formRef.value.validate()
}

/** Form value */
const getData = () => {
  return formData.value
}

defineExpose({ validate, getData })
</script>