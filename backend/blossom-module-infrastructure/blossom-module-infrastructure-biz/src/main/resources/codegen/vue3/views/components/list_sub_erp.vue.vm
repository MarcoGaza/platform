#set ($subTable = $subTables.get($subIndex))##Current table
#set ($subColumns = $subColumnsList.get($subIndex))##Current field array
#set ($subJoinColumn = $subJoinColumns.get($subIndex))##Current join Field
#set ($subSimpleClassName = $subSimpleClassNames.get($subIndex))
#set ($subJoinColumn = $subJoinColumns.get($subIndex))##Current join Field
#set ($SubJoinColumnName = $subJoinColumn.javaField.substring(0,1).toUpperCase() + ${subJoinColumn.javaField.substring(1)})##Capitalize the first letter
<template>
  <!-- List -->
  <ContentWrap>
#if ($table.templateType == 11)
    <el-button
      type="primary"
      plain
      @click="openForm('create')"
      v-hasPermi="['${permissionPrefix}:create']"
    >
      <Icon icon="ep:plus" class="mr-5px" /> Newly added
    </el-button>
#end
    <el-table v-loading="loading" :data="list" :stripe="true" :show-overflow-tooltip="true">
      #foreach($column in $subColumns)
      #if ($column.listOperationResult)
        #set ($dictType=$column.dictType)
        #set ($javaField = $column.javaField)
        #set ($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #set ($comment=$column.columnComment)
        #if ( $column.id == $subJoinColumn.id) ## Special：Ignore the master and sub-tables join Field，No need to fill in
        #elseif ($column.javaType == "LocalDateTime")## Time type
      <el-table-column
        label="${comment}"
        align="center"
        prop="${javaField}"
        :formatter="dateFormatter"
        width="180px"
      />
        #elseif($column.dictType && "" != $column.dictType)## Data dictionary
      <el-table-column label="${comment}" align="center" prop="${javaField}">
        <template #default="scope">
          <dict-tag :type="DICT_TYPE.$dictType.toUpperCase()" :value="scope.row.${column.javaField}" />
        </template>
      </el-table-column>
        #else
      <el-table-column label="${comment}" align="center" prop="${javaField}" />
        #end
      #end
    #end
    #if ($table.templateType == 11)
      <el-table-column label="Operation" align="center">
        <template #default="scope">
          <el-button
            link
            type="primary"
            @click="openForm('update', scope.row.id)"
            v-hasPermi="['${permissionPrefix}:update']"
          >
            Edit
          </el-button>
          <el-button
            link
            type="danger"
            @click="handleDelete(scope.row.id)"
            v-hasPermi="['${permissionPrefix}:delete']"
          >
            Delete
          </el-button>
        </template>
      </el-table-column>
    #end
    </el-table>
    #if ($table.templateType == 11)
    <!-- Pagination -->
    <Pagination
      :total="total"
      v-model:page="queryParams.pageNo"
      v-model:limit="queryParams.pageSize"
      @pagination="getList"
    />
    #end
  </ContentWrap>
#if ($table.templateType == 11)
    <!-- Form pop-up window：Add/Modify -->
    <${subSimpleClassName}Form ref="formRef" @success="getList" />
#end
</template>
<script setup lang="ts">
import { getIntDictOptions, getStrDictOptions, getBoolDictOptions, DICT_TYPE } from '@/utils/dict'
import { dateFormatter } from '@/utils/formatTime'
import * as ${simpleClassName}Api from '@/api/${table.moduleName}/${table.businessName}'
#if ($table.templateType == 11)
import ${subSimpleClassName}Form from './${subSimpleClassName}Form.vue'
#end

const { t } = useI18n() // Internationalization
const message = useMessage() // Message pop-up window

const props = defineProps<{
  ${subJoinColumn.javaField}: undefined // ${subJoinColumn.columnComment}（Related fields of the main table）
}>()
const loading = ref(false) // Loading list
const list = ref([]) // List data
#if ($table.templateType == 11)
const total = ref(0) // Total number of pages in the list
const queryParams = reactive({
  pageNo: 1,
  pageSize: 10,
  ${subJoinColumn.javaField}: undefined
})

/** Monitor changes in the associated fields of the main table，Load the corresponding sub-table data */
watch(
  () => props.${subJoinColumn.javaField},
  (val) => {
    queryParams.${subJoinColumn.javaField} = val
    handleQuery()
  },
  { immediate: false }
)
#end

/** Query list */
const getList = async () => {
  loading.value = true
  try {
#if ($table.templateType == 11)
    const data = await ${simpleClassName}Api.get${subSimpleClassName}Page(queryParams)
    list.value = data.list
    total.value = data.total
#else
  #if ( $subTable.subJoinMany )
    list.value = await ${simpleClassName}Api.get${subSimpleClassName}ListBy${SubJoinColumnName}(props.${subJoinColumn.javaField})
  #else
    const data = await ${simpleClassName}Api.get${subSimpleClassName}By${SubJoinColumnName}(props.${subJoinColumn.javaField})
    if (!data) {
      return
    }
    list.value.push(data)
  #end
#end
  } finally {
    loading.value = false
  }
}

/** Search button operation */
const handleQuery = () => {
  queryParams.pageNo = 1
  getList()
}
#if ($table.templateType == 11)

/** Add/Modify operation */
const formRef = ref()
const openForm = (type: string, id?: number) => {
  if (!props.${subJoinColumn.javaField}) {
    message.error('Please select one${table.classComment}')
    return
  }
  formRef.value.open(type, id, props.${subJoinColumn.javaField})
}

/** Delete button operation */
const handleDelete = async (id: number) => {
  try {
    // Second confirmation of deletion
    await message.delConfirm()
    // Initiate deletion
    await ${simpleClassName}Api.delete${subSimpleClassName}(id)
    message.success(t('common.delSuccess'))
    // Refresh list
    await getList()
  } catch {}
}
#end
#if ($table.templateType != 11)

/** Initialization **/
onMounted(() => {
  getList()
})
#end
</script>