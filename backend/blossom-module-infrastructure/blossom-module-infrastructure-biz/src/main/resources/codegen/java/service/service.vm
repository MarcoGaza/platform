package ${basePackage}.module.${table.moduleName}.service.${table.businessName};

import java.util.*;
import javax.validation.*;
import ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName}.vo.*;
import ${basePackage}.module.${table.moduleName}.dal.dataobject.${table.businessName}.${table.className}DO;
## Special：Master and sub-table exclusive logic
#foreach ($subTable in $subTables)
import ${basePackage}.module.${subTable.moduleName}.dal.dataobject.${subTable.businessName}.${subTable.className}DO;
#end
import ${PageResultClassName};
import ${PageParamClassName};

/**
 * ${table.classComment} Service Interface
 *
 * @author ${table.author}
 */
public interface ${table.className}Service {

    /**
     * Create${table.classComment}
     *
     * @param createReqVO Create information
     * @return Number
     */
    ${primaryColumn.javaType} create${simpleClassName}(@Valid ${sceneEnum.prefixClass}${table.className}SaveReqVO createReqVO);

    /**
     * Update${table.classComment}
     *
     * @param updateReqVO Update information
     */
    void update${simpleClassName}(@Valid ${sceneEnum.prefixClass}${table.className}SaveReqVO updateReqVO);

    /**
     * Delete${table.classComment}
     *
     * @param id Number
     */
    void delete${simpleClassName}(${primaryColumn.javaType} id);

    /**
     * Get${table.classComment}
     *
     * @param id Number
     * @return ${table.classComment}
     */
    ${table.className}DO get${simpleClassName}(${primaryColumn.javaType} id);

## Special：Tree table exclusive logic（Trees do not need paging interfaces）
#if ( $table.templateType != 2 )
    /**
     * Get${table.classComment}Pagination
     *
     * @param pageReqVO Paged query
     * @return ${table.classComment}Pagination
     */
    PageResult<${table.className}DO> get${simpleClassName}Page(${sceneEnum.prefixClass}${table.className}PageReqVO pageReqVO);
#else
    /**
     * Get${table.classComment}List
     *
     * @param listReqVO Query conditions
     * @return ${table.classComment}List
     */
    List<${table.className}DO> get${simpleClassName}List(${sceneEnum.prefixClass}${table.className}ListReqVO listReqVO);
#end

## Special：Master and sub-table exclusive logic
#foreach ($subTable in $subTables)
#set ($index = $foreach.count - 1)
#set ($subSimpleClassName = $subSimpleClassNames.get($index))
#set ($subPrimaryColumn = $subPrimaryColumns.get($index))##Current primary Field
#set ($subJoinColumn = $subJoinColumns.get($index))##Current join Field
#set ($SubJoinColumnName = $subJoinColumn.javaField.substring(0,1).toUpperCase() + ${subJoinColumn.javaField.substring(1)})##Capitalize the first letter
#set ($subClassNameVar = $subClassNameVars.get($index))
    // ==================== Subtable（$subTable.classComment） ====================

## Situation 1：MASTER_ERP Time，Need to query the sub-tables
#if ( $table.templateType == 11 )
    /**
     * Get${subTable.classComment}Pagination
     *
     * @param pageReqVO Paged query
     * @param ${subJoinColumn.javaField} ${subJoinColumn.columnComment}
     * @return ${subTable.classComment}Pagination
     */
    PageResult<${subTable.className}DO> get${subSimpleClassName}Page(PageParam pageReqVO, ${subJoinColumn.javaType} ${subJoinColumn.javaField});

## Case 2：Non MASTER_ERP Time，Need to list and query subtables
#else
    #if ( $subTable.subJoinMany )
    /**
     * Get${subTable.classComment}List
     *
     * @param ${subJoinColumn.javaField} ${subJoinColumn.columnComment}
     * @return ${subTable.classComment}List
     */
    List<${subTable.className}DO> get${subSimpleClassName}ListBy${SubJoinColumnName}(${subJoinColumn.javaType} ${subJoinColumn.javaField});

    #else
    /**
     * Get${subTable.classComment}
     *
     * @param ${subJoinColumn.javaField} ${subJoinColumn.columnComment}
     * @return ${subTable.classComment}
     */
    ${subTable.className}DO get${subSimpleClassName}By${SubJoinColumnName}(${subJoinColumn.javaType} ${subJoinColumn.javaField});

    #end
#end
## Special：MASTER_ERP Time，Support single addition、Modify、Delete operation
#if ( $table.templateType == 11 )
    /**
     * Create${subTable.classComment}
     *
     * @param ${subClassNameVar} Create information
     * @return Number
     */
    ${subPrimaryColumn.javaType} create${subSimpleClassName}(@Valid ${subTable.className}DO ${subClassNameVar});

    /**
     * Update${subTable.classComment}
     *
     * @param ${subClassNameVar} Update information
     */
    void update${subSimpleClassName}(@Valid ${subTable.className}DO ${subClassNameVar});

    /**
     * Delete${subTable.classComment}
     *
     * @param id Number
     */
    void delete${subSimpleClassName}(${subPrimaryColumn.javaType} id);

	/**
	 * Get${subTable.classComment}
	 *
	 * @param id Number
     * @return ${subTable.classComment}
	 */
    ${subTable.className}DO get${subSimpleClassName}(${subPrimaryColumn.javaType} id);

#end
#end
}